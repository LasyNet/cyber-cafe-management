#!/bin/bash

echo "üöÄ D√©marrage des services de base de donn√©es pour le Cyber Caf√©..."

# V√©rifier si le fichier .env existe
if [ ! -f ".env" ]; then
    echo "‚ùå Le fichier .env n'existe pas."
    echo "üí° Ex√©cutez d'abord : ./setup-env.sh"
    exit 1
fi

# V√©rifier si Docker est en cours d'ex√©cution
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n'est pas en cours d'ex√©cution. Veuillez d√©marrer Docker Desktop."
    exit 1
fi

# Charger les variables d'environnement
source .env

# Cr√©er les dossiers de donn√©es s'ils n'existent pas
mkdir -p ${DATA_VOLUME_PATH}/auth
mkdir -p ${DATA_VOLUME_PATH}/clients
mkdir -p ${DATA_VOLUME_PATH}/computers
mkdir -p ${DATA_VOLUME_PATH}/sessions
mkdir -p ${DATA_VOLUME_PATH}/reporting
mkdir -p ${DATA_VOLUME_PATH}/redis

# Arr√™ter et supprimer les conteneurs existants
echo "üîÑ Arr√™t des conteneurs existants..."
docker-compose down

# D√©marrer les services
echo "‚úÖ D√©marrage des services..."
docker-compose --env-file .env up -d

# Attendre que les services soient pr√™ts
echo "‚è≥ Attente du d√©marrage des services..."
sleep 10

# V√©rifier le statut des conteneurs
echo "üìä Statut des conteneurs :"
docker-compose ps

echo "üéâ Services d√©marr√©s avec succ√®s !"
echo ""
echo "üìã Ports des services :"
echo "  - Auth DB: ${AUTH_DB_HOST}:${AUTH_DB_PORT}"
echo "  - Clients DB: ${CLIENTS_DB_HOST}:${CLIENTS_DB_PORT}"
echo "  - Computers DB: ${COMPUTERS_DB_HOST}:${COMPUTERS_DB_PORT}"
echo "  - Sessions DB: ${SESSIONS_DB_HOST}:${SESSIONS_DB_PORT}"
echo "  - Reporting DB: ${REPORTING_DB_HOST}:${REPORTING_DB_PORT}"
echo "  - Redis: ${REDIS_HOST}:${REDIS_PORT}" 